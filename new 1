
main:

BL ArrayBuilder

MOVZ X1, #0, LSL #0
MOVZ X2, #8, LSL #0

BL Swap

B mainEnd

ArrayBuilder:

	SUBI SP, SP, #8
	STUR LR, [SP, #0]

	//For now this function is hard coded to fill 12 arrays with the alphabet starting at address 0
	ADDI X0, X0, #65
	ADDI X1, X1, #66
	ADDI X2, X2, #67
	ADDI X3, X3, #68
	ADDI X4, X4, #69
	ADDI X5, X5, #70
	ADDI X6, X6, #71
	ADDI X7, X7, #72
	ADDI X8, X8, #73
	ADDI X9, X9, #74
	ADDI X10, X10, #75
	ADDI X11, X11, #76
	
	STUR X0, [XZR, #0]
	STUR X1, [XZR, #8]
	STUR X2, [XZR, #16]
	STUR X3, [XZR, #24]
	STUR X4, [XZR, #32]
	STUR X5, [XZR, #40]
	STUR X6, [XZR, #48]
	STUR X7, [XZR, #56]
	STUR X8, [XZR, #64]
	STUR X9, [XZR, #72]
	STUR X10, [XZR, #80]
	STUR X11, [XZR, #88]
	
	LDUR X9, [SP, #0]
	ADDI SP, SP, #8
	DUMP
	BR X9

Swap: //Parameters(X1 Int0, X2 Int1)
	
	//Start
	SUBI SP, SP, #8		//Make space on stack
	STUR LR, [SP, #0]	//Store link register
	
	//Body
	LDUR X9, [X1, #0]
	LDUR X10, [X2, #0]
	STUR X10, [X1, #0]
	STUR X9, [X2, #0]
	
	//End
	LDUR X9, [SP, #0]
	ADDI SP, SP, #8
	DUMP
	BR X9

mainEnd:


