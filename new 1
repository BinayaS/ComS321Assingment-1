
main:

BL ArrayBuilder

MOVZ X1, #0, LSL #0
MOVZ X2, #8, LSL #0

BL Swap

B mainEnd

ArrayBuilder:

	SUBI SP, SP, #8
	STUR LR, [SP, #0]
	
	ADDI X0, X0, #16
	
	MOVZ X1, #0, LSL #0
	
	MOVZ X2, #0, LSL #0
	
	MOVZ X18, #0, LSL #0
	MOVZ X19, #0, LSL #0
	
	ADDI X18, X18, #122
	ADDI X19, X19, #80
	
	ArrayBuilderLoop:
	
		SUBI X0, X0, #1
		
		SUBI X18, X18, #1
		ADD X1, X1, X18
		LSL X1, X1, #8
		
		SUBI X19, X19, #1
		ADD X2, X2, X19
		LSL X2, X2, #8

		CBZ X0, ArrayBuilderEnd
		B ArrayBuilderLoop
	
	ArrayBuilderEnd:
		STUR X1, [XZR, #8]
		STUR X2, [XZR, #0]
		LDUR X17, [SP, #0]
		ADDI SP, SP, #8
		DUMP
		BR X17

Swap: //Parameters(X1 Int0, X2 Int1)
	
	//Start
	SUBI SP, SP, #8		//Make space on stack
	STUR LR, [SP, #0]	//Store link register
	
	//Body
	LDUR X9, [X1, #0]
	LDUR X10, [X2, #0]
	STUR X10, [X1, #0]
	STUR X9, [X2, #0]
	
	//End
	LDUR X11, [SP, #0]
	ADDI SP, SP, #8
	DUMP
	BR X11

MinIndex: //Parameters(XZR array, X1 //integer length, X0 //integer start)

SUBI SP, SP, #8 //makes space on the stack
STUR LR, [SP, #0] //stores link register

LDUR X9, [X0, #0] //loads start value
ADDI X9, X9, #1  //adds 1 to start value

for_loop: 
	LDUR X10, [X9, #0] //index i 
	LDUR X11, [X0, #0] //minIndex 
	CMP X10, X11
	B.LT less_than
	ADDI X10, X10, #1
	CMP X10, X0 
	B.LT for_loop

less_than:
	LDUR X11, [X10, #0]
	B for_loop

LDUR X11, [SP, #0]
ADDI SP, SP, #8
DUMP

mainEnd:


